name: Backend CI

on:
  pull_request:
    paths:
      - "motionit/**"
      - ".github/**"
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  backend-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: motionit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew

      # Ï†ÑÏ≤¥(Îã®ÏúÑ+ÌÜµÌï©) Ïã§Ìñâ
      - name: Run Full Test
        run: ./gradlew clean fullTest
      - name: Generate JaCoCo (fullTest)
        run: ./gradlew jacocoFullTestReport

      # Ïã§Ìå®/ÏÑ±Í≥µÍ≥º Î¨¥Í¥ÄÌïòÍ≤å Î¶¨Ìè¨ÌåÖ Îã®Í≥ÑÎäî ÏßÑÌñâ
      - name: Publish Unit Test Results (JUnit)
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            motionit/build/test-results/test/*.xml
            motionit/build/test-results/fullTest/*.xml
          check_run: true
          comment_mode: always

      - name: Upload failed-tests.txt (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests
          path: motionit/build/reports/tests/failed-tests.txt
          if-no-files-found: ignore

      # ====== upsert ÏΩîÎ©òÌä∏ Ïä§ÌÖù ======
      - name: Upsert PR comment with failed tests
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'motionit/build/reports/tests/failed-tests.txt';
            const MARK = '<!-- FAILED-TESTS-SUMMARY -->';

            function buildBody(textBlock) {
              return [
                MARK,
                '### ‚ùå Failed Tests (from Gradle summary)',
                '',
                '<details><summary>Expand</summary>',
                '',
                '```text',
                textBlock,
                '```',
                '',
                '</details>'
              ].join('\n');
            }

            // PRÏóêÏÑúÎßå ÏûëÎèô
            if (!context.payload.pull_request) {
              core.info('Not a PR event, skip commenting');
              return;
            }

            // ÌååÏùº ÏóÜÍ±∞ÎÇò "No failures"Î©¥, Í∏∞Ï°¥ ÏΩîÎ©òÌä∏Í∞Ä ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú/Ïà®ÍπÄ Ï≤òÎ¶¨(Ïó¨Í∏∞ÏÑúÎäî ÏÇ≠Ï†ú)ÌïòÍ≥† Ï¢ÖÎ£å
            if (!fs.existsSync(path)) {
              core.info('failed-tests.txt not found');
              // ÏΩîÎ©òÌä∏Í∞Ä ÏûàÏúºÎ©¥ ÏÇ≠Ï†ú
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                per_page: 100
              });
              const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(MARK));
              if (existing) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id
                });
              }
              return;
            }

            const content = fs.readFileSync(path, 'utf8').trim();
            if (!content || content === 'No failures üéâ') {
              core.info('No failed tests. Remove existing comment if present.');
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                per_page: 100
              });
              const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(MARK));
              if (existing) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id
                });
              }
              return;
            }

            const body = buildBody(content);

            // upsert: Í∏∞Ï°¥ ÎßàÏª§ ÏΩîÎ©òÌä∏ Ï∞æÍ∏∞
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              per_page: 100
            });
            const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(MARK));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
              core.info('Updated existing failed-tests comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
              core.info('Created new failed-tests comment');
            }

      - name: Upload JaCoCo HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-full-html
          path: motionit/build/reports/jacocoFull/html
          if-no-files-found: warn